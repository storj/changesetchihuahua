// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/storj/changesetchihuahua/gerrit (interfaces: Client)

// Package app_test is a generated GoMock package.
package app_test

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	gerrit "github.com/storj/changesetchihuahua/gerrit"
	reflect "reflect"
)

// MockClient is a mock of Client interface
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// Close mocks base method
func (m *MockClient) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockClientMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockClient)(nil).Close))
}

// GetChangeEx mocks base method
func (m *MockClient) GetChangeEx(arg0 context.Context, arg1 string, arg2 *gerrit.QueryChangesOpts) (gerrit.ChangeInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChangeEx", arg0, arg1, arg2)
	ret0, _ := ret[0].(gerrit.ChangeInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChangeEx indicates an expected call of GetChangeEx
func (mr *MockClientMockRecorder) GetChangeEx(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChangeEx", reflect.TypeOf((*MockClient)(nil).GetChangeEx), arg0, arg1, arg2)
}

// GetChangeReviewers mocks base method
func (m *MockClient) GetChangeReviewers(arg0 context.Context, arg1 string) ([]gerrit.ReviewerInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChangeReviewers", arg0, arg1)
	ret0, _ := ret[0].([]gerrit.ReviewerInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChangeReviewers indicates an expected call of GetChangeReviewers
func (mr *MockClientMockRecorder) GetChangeReviewers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChangeReviewers", reflect.TypeOf((*MockClient)(nil).GetChangeReviewers), arg0, arg1)
}

// GetPatchSetInfo mocks base method
func (m *MockClient) GetPatchSetInfo(arg0 context.Context, arg1, arg2 string) (gerrit.ChangeInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPatchSetInfo", arg0, arg1, arg2)
	ret0, _ := ret[0].(gerrit.ChangeInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPatchSetInfo indicates an expected call of GetPatchSetInfo
func (mr *MockClientMockRecorder) GetPatchSetInfo(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPatchSetInfo", reflect.TypeOf((*MockClient)(nil).GetPatchSetInfo), arg0, arg1, arg2)
}

// ListRevisionComments mocks base method
func (m *MockClient) ListRevisionComments(arg0 context.Context, arg1, arg2 string) (map[string][]gerrit.CommentInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRevisionComments", arg0, arg1, arg2)
	ret0, _ := ret[0].(map[string][]gerrit.CommentInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRevisionComments indicates an expected call of ListRevisionComments
func (mr *MockClientMockRecorder) ListRevisionComments(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRevisionComments", reflect.TypeOf((*MockClient)(nil).ListRevisionComments), arg0, arg1, arg2)
}

// QueryAccountsEx mocks base method
func (m *MockClient) QueryAccountsEx(arg0 context.Context, arg1 string, arg2 *gerrit.QueryAccountsOpts) ([]gerrit.AccountInfo, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryAccountsEx", arg0, arg1, arg2)
	ret0, _ := ret[0].([]gerrit.AccountInfo)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// QueryAccountsEx indicates an expected call of QueryAccountsEx
func (mr *MockClientMockRecorder) QueryAccountsEx(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryAccountsEx", reflect.TypeOf((*MockClient)(nil).QueryAccountsEx), arg0, arg1, arg2)
}

// QueryChangesEx mocks base method
func (m *MockClient) QueryChangesEx(arg0 context.Context, arg1 []string, arg2 *gerrit.QueryChangesOpts) ([]gerrit.ChangeInfo, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryChangesEx", arg0, arg1, arg2)
	ret0, _ := ret[0].([]gerrit.ChangeInfo)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// QueryChangesEx indicates an expected call of QueryChangesEx
func (mr *MockClientMockRecorder) QueryChangesEx(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryChangesEx", reflect.TypeOf((*MockClient)(nil).QueryChangesEx), arg0, arg1, arg2)
}

// URLForChange mocks base method
func (m *MockClient) URLForChange(arg0 *gerrit.ChangeInfo) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "URLForChange", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// URLForChange indicates an expected call of URLForChange
func (mr *MockClientMockRecorder) URLForChange(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "URLForChange", reflect.TypeOf((*MockClient)(nil).URLForChange), arg0)
}
